<?xml version="1.0"?>
<robot name="gokart" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- ****************** ROBOT CONSTANTS *******************************  -->
  <!-- Define the size of the robot's main chassis in meters -->
  <xacro:property name="base_width" value="0.85" />
  <xacro:property name="base_length" value="1.05" />
  <xacro:property name="base_height" value="0.015" />

  <!-- Define the shape of the robot's two back wheels in meters -->
  <xacro:property name="wheel_radius" value="0.1397" />
  <xacro:property name="wheel_width" value="0.09525" /> <!-- 0.1905 -->

  <!-- x-axis points forward, y-axis points to left, z-axis points upwards -->
  <!-- Define the gap between the wheel and chassis along y-axis in meters -->
  <xacro:property name="wheel_ygap" value="0.035" />

  <!-- Position the wheels along the z-axis -->
  <xacro:property name="wheel_zoff" value="0" />

  <!-- Position the wheels along the x-axis -->
  <xacro:property name="wheel_xoff" value="0.525" />


  <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}" />
      <mass value="${m}" />
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}" />
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}" />
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0" ixz="0" iyy="${(m/12) * (3*r*r + h*h)}" iyz="0" izz="${(m/2) * (r*r)}" />
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}" />
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}" />
    </inertial>
  </xacro:macro>

  <link name="root_link"></link>

  <joint name="root_joint" type="fixed">
    <parent link="root_link" />
    <child link="base_link" />
    <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
  </joint>

  <!-- ********************** ROBOT BASE *********************************  -->
  <link name="base_link">
    <visual>
      <origin xyz="-0.525 0 -0.015" rpy="0 0 0" />
      <geometry>
        <mesh filename="file://$(find simulator)/meshes/gokart/BodyV1.stl" />
      </geometry>
      <material name="Red">
        <color rgba="1.0 0.0 0.0 1.0" />
      </material>
    </visual>

    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}" />
      </geometry>
    </collision>

    <xacro:box_inertia m="15.0" w="${base_width}" d="${base_length}" h="${base_height}" />
  </link>

  <gazebo reference="base_link">
    <material>Gazebo/Red</material>
  </gazebo>


  <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
  <!-- Define the center of the main robot chassis projected on the ground -->
  <link name="base_footprint">
    <xacro:box_inertia m="0" w="0" d="0" h="0" />
  </link>

  <!-- The base footprint of the robot is located underneath the chassis -->
  <joint name="base_joint" type="fixed">
    <parent link="base_link" />
    <child link="base_footprint" />
    <origin xyz="0.0 0.0 ${-(wheel_radius+wheel_zoff)}" rpy="0 0 0" />
  </joint>

  <!-- *********************** DRIVE WHEELS ******************************  -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0.09525 0" rpy="${pi/2} 0 0" />
        <geometry>
          <mesh filename="file://$(find simulator)/meshes/gokart/WheelV1.stl" />
          <!-- <cylinder radius="${wheel_radius}" length="${wheel_width}" /> -->
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0" />
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}" />
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}" />
    </link>

    <!-- Connect the wheels to the base_link at the appropriate location, and
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link" />
      <child link="${prefix}_link" />
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0" />
      <axis xyz="0 1 0" />
    </joint>
  </xacro:macro>

  <!-- *********************** STEER WHEELS ******************************  -->
  <xacro:macro name="steer_wheel" params="prefix x_reflect y_reflect">

    <!-- Steer hinge -->
    <link name="${prefix}_steer_link">

      <xacro:cylinder_inertia m="0.1" r="${wheel_radius}" h="${wheel_width}" />
    </link>

    <!-- Connect the steer_link to the base_link at the appropriate location, and
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_steer_joint" type="continuous">
      <parent link="base_link" />
      <child link="${prefix}_steer_link" />
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0" />
      <axis xyz="0 0 1" />
    </joint>

    <!-- Wheel -->
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0.09525 0" rpy="${pi/2} 0 0" />
        <geometry>
          <mesh filename="file://$(find simulator)/meshes/gokart/WheelV1.stl" />
          <!-- <cylinder radius="${wheel_radius}" length="${wheel_width}" /> -->
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0" />
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}" />
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}" />
    </link>

    <!-- Connect the wheels to the steer_link at the appropriate location, and
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="continuous">
      <parent link="${prefix}_steer_link" />
      <child link="${prefix}_link" />
      <origin xyz="0 ${y_reflect*0.02} 0" rpy="0 0 0" />
      <axis xyz="0 1 0" />
    </joint>
  </xacro:macro>

  <!-- Instantiate two wheels using the macro we just made through the
       xacro:wheel tags. We also define the parameters to have one wheel
       on both sides at the back of our robot (i.e. x_reflect=-1). -->
  <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

  <xacro:steer_wheel prefix="drivewhl_fl" x_reflect="1" y_reflect="1" />
  <xacro:steer_wheel prefix="drivewhl_fr" x_reflect="1" y_reflect="-1" />

  <!-- plugins -->

  <!-- *********************** ACKERMANN CONTROL **********************************  -->
  <gazebo>
      <plugin name="simulator_gazebo_plugin" filename="libsimulator_gazebo_plugin.so">
      </plugin>
  </gazebo>

  <!-- *********************** GPS SETUP **********************************  -->
  <gazebo>
      <plugin name="hector_gazebo_plugins" filename="libhector_gazebo_ros_gps.so">
        <bodyName>base_link</bodyName>
        <useWorldSphericalCoordinates>true</useWorldSphericalCoordinates>
        <offset>0.0 0.0 0.0</offset>
        <drift>0.0 0.0 0.0</drift>
        <driftFrequency>0.0 0.0 0.0</driftFrequency>
        <gaussianNoise>0.0 0.0 0.0</gaussianNoise>
        <scaleError>1.0 1.0 1.0</scaleError>
      </plugin>
  </gazebo>


  <!-- *********************** IMU SETUP *********************************  -->
  <!-- Each sensor must be attached to a link.                              -->
  <link name="imu_link">
    <visual>
      <geometry>
        <box size="0.1 0.1 0.1" />
      </geometry>
    </visual>

    <collision>
      <geometry>
        <box size="0.1 0.1 0.1" />
      </geometry>
    </collision>

    <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1" />
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="base_link" />
    <child link="imu_link" />
    <origin xyz="0 0 0.01" />
  </joint>

  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <orientation>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-3</stddev>
            </noise>
          </z>
        </orientation>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
      <plugin name="imu" filename="libgazebo_ros_imu_sensor.so">
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
        <frame_name>imu_link</frame_name>
        <ros>
          <!-- <namespace>/imu</namespace> -->
          <remapping>~/out:=imu</remapping>
        </ros>
      </plugin>
    </sensor>
  </gazebo>

    <!-- *********************** LIDAR SETUP **********************************  -->
  <link name="lidar_link">

    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <mass value="0.125" />
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001" />
    </inertial>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <cylinder radius="0.0508" length="0.75" />
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <cylinder radius="0.0508" length="0.75" />
      </geometry>
    </visual>

  </link>

  <joint name="lidar_joint" type="fixed">
    <parent link="base_link" />
    <child link="lidar_link" />
    <origin xyz="0.215 0.0 0.30" rpy="0 0 0" />
  </joint>

  <gazebo reference="lidar_link">
    <!-- see https://github.com/MURDriverless/ouster_example -->
    <sensor name="ouster_os1_32" type="ray">
      <always_on>true</always_on>
      <visualize>false</visualize>
      <pose>0.0 0 0.0 0 0 0</pose>
      <update_rate>15</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>667</samples>
            <resolution>0.54</resolution>
            <min_angle>0.000000</min_angle>
            <max_angle>6.280000</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.120000</min>
          <max>20</max>
          <resolution>0.54</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="ouster_os1_32" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <!-- <namespace>/lidar</namespace> -->
          <remapping>~/out:=scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>lidar_link</frame_name>
      </plugin>
    </sensor>
    <material>Gazebo/Purple</material>
  </gazebo>


</robot>
